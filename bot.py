import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from config import BOT_TOKEN
from handlers import start, review, progress, help, group_stats, training

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def set_bot_commands(bot: Bot):
    """Set bot commands menu"""
    commands = [
        BotCommand(command="start", description="üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"),
        BotCommand(command="training", description="üìö –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
        BotCommand(command="progress", description="üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="group_stats", description="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await bot.set_my_commands(commands)


async def main():
    """Main bot entry point"""
    # Initialize bot and dispatcher
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    
    # Set commands menu
    await set_bot_commands(bot)
    
    # Register routers
    dp.include_router(start.router)
    dp.include_router(review.router)
    # dp.include_router(audio.router)  # Removed - using embedded audio now
    dp.include_router(training.router)
    dp.include_router(progress.router)
    dp.include_router(group_stats.router)
    dp.include_router(help.router)
    
    logger.info("Bot starting...")
    
    # Start polling
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")

